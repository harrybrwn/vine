// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package node

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GetBlockClient is the client API for GetBlock service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetBlockClient interface {
	Block(ctx context.Context, in *BlockReq, opts ...grpc.CallOption) (*BlockMsg, error)
}

type getBlockClient struct {
	cc grpc.ClientConnInterface
}

func NewGetBlockClient(cc grpc.ClientConnInterface) GetBlockClient {
	return &getBlockClient{cc}
}

func (c *getBlockClient) Block(ctx context.Context, in *BlockReq, opts ...grpc.CallOption) (*BlockMsg, error) {
	out := new(BlockMsg)
	err := c.cc.Invoke(ctx, "/node.GetBlock/Block", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetBlockServer is the server API for GetBlock service.
// All implementations must embed UnimplementedGetBlockServer
// for forward compatibility
type GetBlockServer interface {
	Block(context.Context, *BlockReq) (*BlockMsg, error)
	mustEmbedUnimplementedGetBlockServer()
}

// UnimplementedGetBlockServer must be embedded to have forward compatible implementations.
type UnimplementedGetBlockServer struct {
}

func (*UnimplementedGetBlockServer) Block(context.Context, *BlockReq) (*BlockMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Block not implemented")
}
func (*UnimplementedGetBlockServer) mustEmbedUnimplementedGetBlockServer() {}

func RegisterGetBlockServer(s *grpc.Server, srv GetBlockServer) {
	s.RegisterService(&_GetBlock_serviceDesc, srv)
}

func _GetBlock_Block_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetBlockServer).Block(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.GetBlock/Block",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetBlockServer).Block(ctx, req.(*BlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _GetBlock_serviceDesc = grpc.ServiceDesc{
	ServiceName: "node.GetBlock",
	HandlerType: (*GetBlockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Block",
			Handler:    _GetBlock_Block_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}
